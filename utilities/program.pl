program-mod(add delete list kill edit cedit function accept "?REV-P?")(Parse-of-S Parse-of-SS Parse-of-Cond CON ON APPEND which : Expression-Parse dict func end yes all =)
(("?LIST-PRED?" X)
  (CL ((X|Y)|Z))
  ("?REV-P?" ((X|Y)|Z) x)
  (P|x)
  (PP)
  FAIL)
(("?LIST-PRED?" X))
((Acceptin X)
  (P X)
  (R Y)
  (OR ((LST Y) (ADDCL ((X|Y))) (Acceptin X)) ((OR ((EQ Y end)) ((P " " Y not a list) (PP) (Acceptin X))))))
((gedit X Y Z)
  (CON X)
  (CL ((dict X)))
  (CL ((X|x)|y) Y Y)
  (Parse-of-S ((X|x)|y) z)
  (RFILL (Y z) X1)
  (INT X1)
  (R Y1)
  (Parse-of-S Z1 Y1)
  (EQ Z1 ((x1|y1)|z1))
  (SUM 1 X2 X1)
  (NOT SYS (x1|y1))
  (Z X Y)
  (ADDCL Z1 X2)
  (IF (EQ x1 X) () ((PP relation changed to x1) ("?DECLARE?" Z1))))
(("?DECL?" X Y)
  (OR ((CL ((Y X))) /) ((ADDCL ((Y X))))))
((Rev-body () () X))
((Rev-body (X|Y) (Z|x) Z)
  (Parse-of-Cond X x y)
  (Rev-body Y y "and@M    "))
(("?DECLARE?" ((X|Y)|Z))
  ("?DECL?" X dict))
((add X)
  (NUM X)
  /
  (LESS 0 X)
  (R Y)
  (add X Y))
((add X)
  /
  (add 32767 X))
((add X Y)
  (Parse-of-S Z Y)
  (SUM x 1 X)
  (ADDCL Z x)
  ("?DECLARE?" Z))
((delete (X|Y))
  /
  (Parse-of-S Z (X|Y))
  (OR ((DELCL Z)) ((PP No sentence (X|Y)))))
((delete X)
  (CON X)
  (R Y)
  (delete X Y))
((delete X Y)
  (IF (DELCL X Y) () ((PP No sentence Y for X))))
((list all)
  /
  (FORALL ((CL ((dict X)))) (("?LIST-PRED?" X))))
((list X)
  (OR ((CL ((dict X)))) ((ON X (dict func))))
  ("?LIST-PRED?" X))
((kill all)
  /
  (P Entire program "?(yes/no)")
  (R X)
  (EQ X yes)
  (KILL ALL)
  (PP Entire program deleted))
((kill X)
  (CON X)
  (DELCL ((dict X)))
  /
  (KILL X)
  (OR ((DELCL ((func X)))) ())
  (PP Definition for X deleted))
((kill X)
  (OPMOD X)
  CLMOD
  (KILL X)
  (PP Module X deleted))
((edit X)
  (R Y)
  (edit X Y))
((edit X Y)
  (gedit X Y DELCL))
((cedit X)
  (R Y)
  (cedit X Y))
((cedit X Y)
  (gedit X Y /*))
((function X)
  (CON X)
  ("?DECL?" X func))
((accept X)
  ("?DECL?" X dict)
  (Acceptin X))
(("?REV-P?" (X|Y) Z)
  (Parse-of-SS X Z x)
  (Rev-body Y x "if@M    "))
CLMOD
