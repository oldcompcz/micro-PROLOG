query-mod("FIND:" APPEND CONS ON Parse-of-S Parse-of-ConjC Parse-of-SS Parse-of-Cond Parse-of-CC # @ + "-" ~ * % defined true-of reserved save load not forall isall = all is one which)(Expression-Parse end dict func & and if then either or :)
((Oneex X Y)
  (? Y)
  (PP|X)
  (P "more?(y/n)")
  (R Z)
  (IF (EQ Z "y") (FAIL) ()))
((Oneex|X)
  (PP No (more) answers))
((Whichex X Y)
  (? Y)
  (PP|X)
  FAIL)
((Whichex X Y)
  (PP No (more) answers))
((Mem1 X Y)
  (NOT VAR X)
  (ON X Y)
  /)
(("?EQNTEST?" X)
  (VAR X)
  /)
(("?EQNTEST?" X)
  (defined Expression-Parse))
(("?CEQ?" X Y Z)
  (OR ((VAR X) / (NOT VAR Y) (EQ Y Z)) ((EQ Y Z))))
((is-body X () (Y|Z) (Y) (Y|Z))
  /)
((is-body X () () Y ())
  /)
((is-body (X) () (X) Y ())
  /)
((is-body X (Y|Z) (x|y) z X1)
  (ON x X)
  /
  (IF (VAR Z) ((find (and &|z) y Y1 Z1)) ())
  (Parse-of-Cond Y y Z1)
  (is-body (and &) Z Z1 z X1))
((find X () () ())
  /)
((find X (Y|Z) () (Y|Z))
  (Mem1 Y X)
  /)
((find X (Y|Z) (Y|x) y)
  (find X Z x y))
((COPYRIGHT 1983 LPA LTD (V 6 -15)))
(("FIND:" (X Y|Z) X (:|Z) isall)
  (OR ((VAR Z)) ((NOT VAR Y)))
  (EQ Y :)
  /)
(("FIND:" X Y Z x)
  (find (:) X Y Z)
  (OR ((EQ Z (:|y)) /) ((P "Syntax error: ") (PP missing colon in) (PP X) ABORT)))
((APPEND () X X))
((APPEND (X|Y) Z (X|x))
  (APPEND Y Z x))
((CONS X Y (X|Y)))
((ON X (X|Y)))
((ON X (Y|Z))
  (ON X Z))
((Parse-of-S (X|Y) Z)
  (IF (VAR Z) () ((find (if) Z x y)))
  (Parse-of-SS X Z y)
  (is-body (if) Y y () z))
((Parse-of-ConjC X Y Z)
  (is-body X Y Z () ()))
((Parse-of-SS (X|Y) (X Y|Z) Z)
  (VAR Y)
  (CON X)
  /)
((Parse-of-SS (X Y Z) (Y X Z|x) x)
  (CON X)
  /)
((Parse-of-SS (X Y) (Y X|Z) Z)
  (CON X)
  /)
((Parse-of-SS (X) (X|Y) Y)
  (CON X)
  /)
((Parse-of-SS (X|Y) (X Y|Z) Z)
  (CON X)
  (LST Y)
  /)
((Parse-of-SS X Y Y)
  (VAR X)
  /
  (P "Syntax error: ")
  (PP redundant & or and)
  ABORT)
((Parse-of-SS X Y Z)
  (IF (VAR X) ((find x Y y Z) (P "Syntax error: ") (PP|y) (PP not a valid sentence form) ABORT) (FAIL)))
((Parse-of-Cond X Y Z)
  (Parse-of-CC X Y Z)
  /)
((Parse-of-Cond X Y Z)
  (Parse-of-SS X Y Z))
((Parse-of-CC (NOT ? X) (Y (Z|x)|y) y)
  ("?CEQ?" X Y not)
  (OR ((VAR Z) /) ((NOT ON Z (either forall))))
  (is-body (?) X (? Z|x) () z)
  /)
((Parse-of-CC (NOT|X) (Y Z|x) y)
  ("?CEQ?" X Y not)
  (Parse-of-Cond X (Z|x) y)
  /)
((Parse-of-CC (!|X) (Y Z|x) y)
  ("?CEQ?" X Y !)
  (Parse-of-Cond X (Z|x) y)
  /)
((Parse-of-CC (OR X Y) ((Z|x)|y) y)
  ("?CEQ?" X Z either)
  (is-body (either) X (Z|x) (or) z)
  (is-body (or) Y z () X1)
  /)
((Parse-of-CC (FORALL X Y) ((Z|x)|y) y)
  ("?CEQ?" X Z forall)
  (is-body (forall) X (Z|x) (then) z)
  (is-body (then) Y z () X1)
  /)
((Parse-of-CC (ISALL X Y|Z) (X x y|z) z)
  ("?CEQ?" Z x isall)
  ("FIND:" y Y X1 isall)
  (is-body (:) Z X1 () Y1)
  /)
((Parse-of-CC (# (EQ X Y) Z) (x y z|X1) X1)
  ("?CEQ?" Z y =)
  ("?EQNTEST?" Z)
  (Expression-Parse (x z) (X Y) Z)
  /)
((Parse-of-CC (# (X|Y) Z) (X x y|z) z)
  (CON X)
  ("?CEQ?" Z x #)
  ("?EQNTEST?" Z)
  (Expression-Parse y Y Z)
  /)
((Parse-of-CC (# (X|Y) Z) (x y z|X1) X1)
  ("?CEQ?" Z y #)
  (Parse-of-SS (X|Y) x ())
  (Parse-of-ConjC (?) Z (?|z)))
((# X)
  (Expression-Parse X Y Z)
  (? Z)
  /
  (PP Y))
((# X Y)
  (? Y)
  /
  X)
((@ X|Y)
  (X|Y))
((+ X Y Z)
  (SUM X Y Z))
(("-" X Y Z)
  (SUM Y Z X))
((* X Y Z)
  (TIMES X Y Z))
((% X Y Z)
  (TIMES Z Y X))
((defined X)
  (CON X)
  (CL ((X|Y)|Z)))
((true-of X Y)
  (X|Y))
((reserved (dict func data-rel|X))
  (DICT Y Z X|x))
((save X)
  (PP Start tape for recording)
  (PP Hit ENTER key when)
  (RFILL (ready) Y)
  (SAVE X))
((load X)
  (LOAD X))
((all X)
  (which X))
((is X)
  (Parse-of-ConjC (?) Y (?|X))
  (IF (? Y) ((PP YES)) ((PP NO))))
((one X)
  ("FIND:" X Y Z one)
  (Parse-of-ConjC (:) x Z)
  (Oneex Y x))
((which X)
  ("FIND:" X Y Z which)
  (Parse-of-ConjC (:) x Z)
  (Whichex Y x))
CLMOD
errmess-mod("?ERROR?")(data-rel)
((E-code 0 "Arithmetic overflow"))
((E-code 1 "Arithmetic underflow"))
((E-code 2 "No definition for relation"))
((E-code 3 "Too many variables"))
((E-code 5 "File error"))
((E-code 6 "CLOSE last used file first"))
((E-code 11 "Break !"))
((E-code 12 "Illegal use of modules"))
((E-code 15 "Break ! during tape read or write"))
((E-code 13 "Line or point off screen"))
((E-code 22 "Invalid colour"))
((E-code X " "))
(("?ERROR?" 4 (ADDCL ((X|Y)|Z)|x))
  /
  (PP Cannot add sentences to X)
  ABORT)
(("?ERROR?" 2 (X|Y))
  (CL ((data-rel X)))
  /
  FAIL)
(("?ERROR?" X (Y|Z))
  (E-code X x)
  (P Evaluation error X : x)
  (PP)
  (PP trying : Y Z)
  ABORT)
CLMOD
program-mod(add delete list kill edit cedit function accept "?REV-P?")(Parse-of-S Parse-of-SS Parse-of-Cond CON ON APPEND which : Expression-Parse dict func end yes all =)
(("?LIST-PRED?" X)
  (CL ((X|Y)|Z))
  ("?REV-P?" ((X|Y)|Z) x)
  (P|x)
  (PP)
  FAIL)
(("?LIST-PRED?" X))
((Acceptin X)
  (P X)
  (R Y)
  (OR ((LST Y) (ADDCL ((X|Y))) (Acceptin X)) ((OR ((EQ Y end)) ((P " " Y not a list) (PP) (Acceptin X))))))
((gedit X Y Z)
  (CON X)
  (CL ((dict X)))
  (CL ((X|x)|y) Y Y)
  (Parse-of-S ((X|x)|y) z)
  (RFILL (Y z) X1)
  (INT X1)
  (R Y1)
  (Parse-of-S Z1 Y1)
  (EQ Z1 ((x1|y1)|z1))
  (SUM 1 X2 X1)
  (NOT SYS (x1|y1))
  (Z X Y)
  (ADDCL Z1 X2)
  (IF (EQ x1 X) () ((PP relation changed to x1) ("?DECLARE?" Z1))))
(("?DECL?" X Y)
  (OR ((CL ((Y X))) /) ((ADDCL ((Y X))))))
((Rev-body () () X))
((Rev-body (X|Y) (Z|x) Z)
  (Parse-of-Cond X x y)
  (Rev-body Y y "and@M    "))
(("?DECLARE?" ((X|Y)|Z))
  ("?DECL?" X dict))
((add X)
  (NUM X)
  /
  (LESS 0 X)
  (R Y)
  (add X Y))
((add X)
  /
  (add 32767 X))
((add X Y)
  (Parse-of-S Z Y)
  (SUM x 1 X)
  (ADDCL Z x)
  ("?DECLARE?" Z))
((delete (X|Y))
  /
  (Parse-of-S Z (X|Y))
  (OR ((DELCL Z)) ((PP No sentence (X|Y)))))
((delete X)
  (CON X)
  (R Y)
  (delete X Y))
((delete X Y)
  (IF (DELCL X Y) () ((PP No sentence Y for X))))
((list all)
  /
  (FORALL ((CL ((dict X)))) (("?LIST-PRED?" X))))
((list X)
  (OR ((CL ((dict X)))) ((ON X (dict func))))
  ("?LIST-PRED?" X))
((kill all)
  /
  (P Entire program "?(yes/no)")
  (R X)
  (EQ X yes)
  (KILL ALL)
  (PP Entire program deleted))
((kill X)
  (CON X)
  (DELCL ((dict X)))
  /
  (KILL X)
  (OR ((DELCL ((func X)))) ())
  (PP Definition for X deleted))
((kill X)
  (OPMOD X)
  CLMOD
  (KILL X)
  (PP Module X deleted))
((edit X)
  (R Y)
  (edit X Y))
((edit X Y)
  (gedit X Y DELCL))
((cedit X)
  (R Y)
  (cedit X Y))
((cedit X Y)
  (gedit X Y /*))
((function X)
  (CON X)
  ("?DECL?" X func))
((accept X)
  ("?DECL?" X dict)
  (Acceptin X))
(("?REV-P?" (X|Y) Z)
  (Parse-of-SS X Z x)
  (Rev-body Y x "if@M    "))
CLMOD
